package challenge_027_test

import (
	"errors"
	"fmt"
	"testing"

	challenge "code-challenges-go/challenges/challenge_027"

	"github.com/stretchr/testify/require"
)

func TestChallenge_027(t *testing.T) {
	t.Parallel()

	type input struct {
		N       int
		strNums []string
	}

	successCases := []struct {
		input  input
		output []string
	}{
		{
			input:  input{N: 2, strNums: []string{"23", "24"}},
			output: []string{"23 :)", "24 :("},
		},
		{
			input: input{
				N:       10,
				strNums: []string{"707", "761", "6673", "1121", "2136", "8430", "8517", "17990", "44116", "29378"},
			},
			output: []string{"707 :(", "761 :)", "6673 :)", "1121 :)", "2136 :(", "8430 :(", "8517 :)", "17990 :(", "44116 :)", "29378 :("},
		},
		{
			input: input{
				N: 50,
				strNums: []string{"28884069",
					"15255918",
					"793890065",
					"792142779",
					"261459860",
					"102194468",
					"689404468",
					"424636898",
					"3473612215",
					"8508737225",
					"9624733145",
					"5408096980",
					"9374416212",
					"7110522176",
					"16709665649",
					"89916858321",
					"85386779618",
					"61194262999",
					"30570163977",
					"328117912160",
					"476021531779",
					"522129642021",
					"555715256074",
					"376076639847",
					"424232326704",
					"3680723624740",
					"4829572012207",
					"7912847312948",
					"1958247411739",
					"4468024943629",
					"1896681012468",
					"8449858244539",
					"7453509141438",
					"726599288606651",
					"403059553008706",
					"963464505020791",
					"689157844164490",
					"741388486974838",
					"640939128580935",
					"922646128289853",
					"249308690059039",
					"681461258122668",
					"3620954018480818",
					"4911635098482485",
					"4082128031442855",
					"27710236654501553",
					"56367211052451312",
					"27692580770914876",
					"16525534153749833",
					"697719833245520439"},
			},
			output: []string{"28884069 :)",
				"15255918 :)",
				"793890065 :(",
				"792142779 :(",
				"261459860 :)",
				"102194468 :)",
				"689404468 :)",
				"424636898 :)",
				"3473612215 :(",
				"8508737225 :)",
				"9624733145 :(",
				"5408096980 :)",
				"9374416212 :(",
				"7110522176 :(",
				"16709665649 :)",
				"89916858321 :(",
				"85386779618 :)",
				"61194262999 :(",
				"30570163977 :(",
				"328117912160 :(",
				"476021531779 :)",
				"522129642021 :(",
				"555715256074 :)",
				"376076639847 :(",
				"424232326704 :)",
				"3680723624740 :(",
				"4829572012207 :)",
				"7912847312948 :(",
				"1958247411739 :)",
				"4468024943629 :)",
				"1896681012468 :)",
				"8449858244539 :(",
				"7453509141438 :(",
				"726599288606651 :(",
				"403059553008706 :(",
				"963464505020791 :)",
				"689157844164490 :(",
				"741388486974838 :(",
				"640939128580935 :)",
				"922646128289853 :(",
				"249308690059039 :)",
				"681461258122668 :)",
				"3620954018480818 :(",
				"4911635098482485 :(",
				"4082128031442855 :)",
				"27710236654501553 :(",
				"56367211052451312 :(",
				"27692580770914876 :)",
				"16525534153749833 :)",
				"697719833245520439 :("},
		},
		{
			input: input{
				N: 30,
				strNums: []string{"2712939616709395196",
					"8773540098233661513",
					"2404277834568699974",
					"8590412756910685593",
					"2701881001870295366",
					"7507778876190050823",
					"82754144591389495778",
					"56062096111521716941",
					"23309561455834016944",
					"73841907787177547505",
					"412089832041649792031",
					"573794892563725215304",
					"738562319252459387961",
					"929488123610466618818",
					"5192096589413817601914",
					"6540732750664388235819",
					"1673294713959721837544",
					"8996034026865469420948",
					"9613726251606272557499",
					"1814749635202801516423",
					"43920529769043088306276",
					"57689917213067644516676",
					"32661878984662075102682",
					"95945151456802793475006",
					"432579896155690172763949",
					"588057966438396711424634",
					"8094037048931853415852396",
					"7258445777006001314818367",
					"4282163185033880782108704",
					"7668897902037856608492414"},
			},
			output: []string{"2712939616709395196 :)",
				"8773540098233661513 :)",
				"2404277834568699974 :(",
				"8590412756910685593 :)",
				"2701881001870295366 :(",
				"7507778876190050823 :(",
				"82754144591389495778 :)",
				"56062096111521716941 :(",
				"23309561455834016944 :(",
				"73841907787177547505 :(",
				"412089832041649792031 :(",
				"573794892563725215304 :(",
				"738562319252459387961 :)",
				"929488123610466618818 :(",
				"5192096589413817601914 :)",
				"6540732750664388235819 :)",
				"1673294713959721837544 :(",
				"8996034026865469420948 :(",
				"9613726251606272557499 :(",
				"1814749635202801516423 :(",
				"43920529769043088306276 :)",
				"57689917213067644516676 :)",
				"32661878984662075102682 :)",
				"95945151456802793475006 :)",
				"432579896155690172763949 :(",
				"588057966438396711424634 :(",
				"8094037048931853415852396 :(",
				"7258445777006001314818367 :)",
				"4282163185033880782108704 :)",
				"7668897902037856608492414 :)"},
		},
		{
			input: input{
				N: 56,
				strNums: []string{"1",
					"6",
					"8",
					"13",
					"60",
					"913",
					"489",
					"9768",
					"3456",
					"9287",
					"45989",
					"496788",
					"29840025",
					"36563801",
					"685085588",
					"486573009",
					"288146548",
					"832141076",
					"6655289706",
					"9292642007",
					"3164543188",
					"7075686538",
					"41016860297",
					"31880667802",
					"207830543655",
					"317953679941",
					"595732132210",
					"3006022391976",
					"63971626265480",
					"62716820370707",
					"96942799282405",
					"28937757750062",
					"663584110970655",
					"102333477995527",
					"6431283691796496",
					"8124956605750856",
					"7967549675787318",
					"9244681613480703",
					"30264592938637733",
					"50581183697787625",
					"413400408055457847",
					"2243749826573112126",
					"5465065846022765077",
					"24941709773598622563",
					"46210575821034680320",
					"73492006573113257836",
					"679927533571841532898",
					"767927314181270261102",
					"618090695302486224418",
					"9212317667882582203478",
					"1488465104453261835504",
					"2135952998394028928579",
					"56619771113193694039313",
					"598694184459454744118777",
					"699532697493580193107478",
					"1646476620141690717724578"},
			},
			output: []string{"1 :)",
				"6 :(",
				"8 :(",
				"13 :)",
				"60 :(",
				"913 :)",
				"489 :(",
				"9768 :)",
				"3456 :)",
				"9287 :(",
				"45989 :(",
				"496788 :)",
				"29840025 :(",
				"36563801 :(",
				"685085588 :)",
				"486573009 :)",
				"288146548 :(",
				"832141076 :(",
				"6655289706 :)",
				"9292642007 :(",
				"3164543188 :(",
				"7075686538 :(",
				"41016860297 :(",
				"31880667802 :(",
				"207830543655 :)",
				"317953679941 :(",
				"595732132210 :(",
				"3006022391976 :)",
				"63971626265480 :)",
				"62716820370707 :(",
				"96942799282405 :(",
				"28937757750062 :(",
				"663584110970655 :)",
				"102333477995527 :(",
				"6431283691796496 :)",
				"8124956605750856 :)",
				"7967549675787318 :)",
				"9244681613480703 :(",
				"30264592938637733 :)",
				"50581183697787625 :(",
				"413400408055457847 :)",
				"2243749826573112126 :(",
				"5465065846022765077 :(",
				"24941709773598622563 :(",
				"46210575821034680320 :(",
				"73492006573113257836 :(",
				"679927533571841532898 :(",
				"767927314181270261102 :(",
				"618090695302486224418 :(",
				"9212317667882582203478 :)",
				"1488465104453261835504 :)",
				"2135952998394028928579 :(",
				"56619771113193694039313 :)",
				"598694184459454744118777 :(",
				"699532697493580193107478 :(",
				"1646476620141690717724578 :)"},
		},
	}

	failureCases := []struct {
		input input
		err   error
	}{
		{
			input: input{N: 0, strNums: []string{"23", "24"}},
			err:   errors.New(challenge.OUT_OF_RANGE_N),
		},
		{
			input: input{N: 2, strNums: []string{"23"}},
			err:   errors.New(challenge.INVALID_NUM),
		},
		{
			input: input{N: 2, strNums: []string{"0", "24"}},
			err:   errors.New(challenge.INVALID_NUM),
		},
	}

	for i := range successCases {
		tc := successCases[i]

		t.Run(fmt.Sprintf("success case %d", i), func(t *testing.T) {
			t.Parallel()

			result, err := challenge.Solution(tc.input.N, tc.input.strNums)
			require.NoError(t, err)
			require.NotNil(t, result)
			require.Equal(t, tc.output, result)
		})
	}

	for i := range failureCases {
		tc := failureCases[i]

		t.Run(fmt.Sprintf("failure case %d", i), func(t *testing.T) {
			t.Parallel()

			result, err := challenge.Solution(tc.input.N, tc.input.strNums)
			require.Error(t, err)
			require.Nil(t, result)
			require.Equal(t, tc.err, err)
		})
	}
}
